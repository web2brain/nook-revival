


if (typeof(sudoku) === 'undefined') {
  var sudoku = (function() {

      return {

        'easydb' : [
"...9.5.62...24..93.....8........27...673..5.....6.9.3...6.......4...3.5...859..4.",
"823..6.1.4...3..5.5..8.9...6...5......1..3....3.62.9.......2..81.........869.....",
".456.......28.....681..3.25..4......31.2...5..2.1.7..........8....3.1..6....72.3.",
"......8...........4.....9.6.8.6..27...1.7..6..9.1...4...678..92..3.....71..4.....",
"...31..54.5..28.....3.45.82..5......23.8.1.6.198........2..4.1.6.........8.6.....",
"....286..6...3.7.4.8.6.4.53..821.....1..5..7.2.4..716.4.68............4..........",
"..1.....3.956...2...6.8.71.3...7.2..97.5..638..........89...5........3.16........",
"2......4....4..59.7........1..8....3.539.27....21....8.8...4.....4..73..5....817.",
"5...3.19.........8.8..923.............84...23....1695..19.........6.........2.615",
"..478....5...9.32..73.....9...4...9......6....28.5.7.3..........5....97.6....8..4",
"....62315........6.....8....4....2........85.38..4...18.1.36.7......5.3..6.2.....",
"..2..87.....49.6.............6...14..8..6...557...426.........2.576.98....1827...",
".1...3.......6.......8.....36.....5.5.83..14...15.8.3.18......6..5.74.8..74..9.15",
"..8143..6....9..3..9726.8...8...71..4....19.2....2.......6...........4.1.2...9...",
"2......6...765....5.14...97.....29.5.......2.9.5.1........9.4........21.698......",
"1....63...5..1.....4.......3...7.69......35..2.9...1..4..29..7.....4.......3....4",
"5...4.....6.7.5.9.....1.3....29.31....362....9..................4...1.6523......4",
"2.....7......35..8..1....5...2.89..75....2..6.16.5..4.......129.74............4..",
"..19...64.6.8..1.7............4.6..14..1..9.2.....86..9....7..5.7...5.2.1.....8..",
"2.6..8...5.........9..53....1...............2.4.9...86.586.92..3...2.6......843.1",
"....4..8....5.........2......1.6..9.36.....24285...3.6.1.6.....45..13..8..3..9..2",
"........7..6.8.3.....2......6..7...1..84.....5.73....2....6871......2.38.....75..",
"...2.5.6....47....9.2.315.4...14...91.......2.6.......4.......365.......32....94.",
"..4.3....586.......9.....45......6.1...2..39....3.9.243...8.9........856..26.....",
"7.....1.41.....92....4....7.2.....6..47......9.....8.15....7..9........8.8.2.54..",
".............9...1.58.6........19.3..3158.4.......28.6..5.2.9.891.4..6..2...3....",
".3..1...28.....7..9....21.6......8....3.......6.7.8.1..7....6.9..9.......25.6.3..",
"....28.7.52.1..3.8.17..4..2.43..1.......3....16...5.....647.15.4..51.........6...",
"3........6859......7..6.5...3.65...49.481....85..47..95...9........7.........17.5",
"..9..2.4..8..4...5.4.15.....3.....58.5...4.3.............2.8..417.9...2.2....7..3",
".1......89.7.4..6..8..2.19.1..6...727.94........8.....836....272.....9........4..",
"......2.5..8..6.....2.4......1..76.8.........36.....1..4671......7..8..1...6...53",
"...19....96...7.4..38.46.....1...8.357.....14.9...........3.....4.9..381.......95",
"1.4...3...3.7...8.....4...672....6.9..9.3..71..3...4....6...917.1......8.4.9..2..",
".1..564........82...8.7.1..5.7.....6.4.......8...21..36.1.3.75...........52...6..",
"..39...4......6......5.7..1.75......8...3.......7986..3.....4...6.8..7.9...1..35.",
"3.8.....4......237.1.4..9...831..4..4.9..7.16.......2..3.2.1....4...6372..6......",
"..8.43.7......6..........48....6..9......1..4..4..5.3.3.19.7...5...8....7..3..6..",
".72.6...81.........8...9..6...92.....47.83.......47.1......8.9.86......2.3.712...",
"2..6.5.8....8..4.......4.....312...........54.....82..4.2.96..58.....6.3..1....2.",
"..9.8.......415.......6.52...21..6....8...9...94...7.1.7...64.....2.417....9....5",
"............4.21...2..1..6..6.8....2..37.6.4.4.9.........36.....94..1.7...72....1",
".7.3........2......95.....483....9....7....45.5....32.......5.64..67...8...92....",
"...9.....3......7..89.4....2.3.8...4.6.4....3.4..19.6.....2....6.4...3..9.17.8...",
"..5...8..9....72.3....9..5....1..4..3......7854.....9.42.7..5..8.........39....24",
"1..3..6..45....71.2.7...4..6....1.8...3.6....51.....4.....3..5.3.....2...4...5..7",
".79.......4.....61...7.2..9.1..9.....86.1...2...3.7...1.....6...94.....33.8...1.4",
"8....4...65..3..9......85.7...6.......9...175.......89..3....1..87......9....53..",
"94.6.3......2....1..2....4.1.......9..5......6...5.3.2.......9..74.....6..1.7..23",
"....71...4..5.91.6.9.3....2...1....4......965...4..2.3..1...6..7....4.....9.53.4."],
        'mediumdb' : [          
"..6.7.2.9...3.96..53..1..87.726.3..11..5..3...5.....6......8.9.8..1..............",
".8.2..5...2..78.9.7.156...8................74..61598........12.......7...5...2..6",
"...7...8.....4961.51.3.8.4.8.6.7..9.1.........3.5.......9.35....6.49....7........",
".........93.......8..6.7....8..342.7.5..8.9.6..296..3.493...8.5.2......3.....56..",
"4...8..75.6.1.4.....1.2.8......965..........25...71689....689.......5..1...7.....",
"3..28.75.........84..75.1..172....6.5.3...24........7...18..6..78.......645......",
".....3..7..5.1...3...........7....65.4.......59.7.64.29..6.53..2.1..9...6..3..9.4",
".4....7612.......8.6.8.79...8......769.......172...8..9137..6.....3.......6....42",
"7.1.48.35.9.1.........52.....7......8..7..2932....1..8.........38........59234...",
"8.........5.....69.9.4.73........578.6....13..38.......4.8....1..93.56.4......85.",
"3...96....2....6.84..2.........3..1....6.4....9......5932......5..1...6.1..85.2.3",
".....1..2......5.....8431...53....6.1.64..7...8475......81752.....2..4..........5",
"4.2.....9.8.3.71.273..4..58..4.......17.5.......82...1.....3......51.....5329....",
".9.1.256.16.93..47........3.7.2.........4.3...........93.4..65.7....61....5..97..",
".9.3.8.51..21..7.3.....49..5....7.9.98..5...2.......181..........74...........23.",
".....3.6.......1..2...1.4...79..2..4.1.9..6..34...65......4.2.74...7.315.........",
".2..4...8..18..534..65...9..5...8.4..829.1.6.9.......3...26...1.................6",
"6..1.5..8..28.69.5...23.............2..64.1..3................11859..4...4..2.5.9",
".9.7....664..1..2.....43.1.9........4.....7.....5......6..5...31....9.7253.17.9.4",
".4..6.1.252....8.3.1..4...7...7.......81.....6........3....4..81...8..54...657...",
"7.4......3.....87....2.6.5.9...2543..............39..2....48..6....972.3...65..9.",
"16....49......3.787..........7......4.93..68...519...33...7..4.....3.........1..6",
"9.4...1.5.5..9..27.7.1..3..6.1....43.9..2..6...2...........7...5...3.6.2..6......",
".....87.63.........9.....15...7..8..........9.1.9..653.7.81.2...832.61.......3...",
".5692....3...7..2.7.1.5..3.93.2.....6......8...5............95.21.........78.96..",
".7..8...658.69...4.4...31........54.7.91..3.8..3.......3....9.....9.........54.1.",
".9......6.....53..47.3..8...35.7..1.8....67..1......64.6......9..4....37.....74..",
".7..43..68.5..6432...8........287..1...6.........1..4....4.1.7.4...3....7....251.",
".....6........4...........717..2..4..29..3.....395..126...79.213..2...9..4..3..6.",
"38.6....9.1....76..26..1.......87..12..36.8....9.2.5.3...87.1............3.......",
"....7....953.4..............1.7..9..4...95...3....84.2...1....5.7.3..12..85..7..3",
"..6....1...........9....4572....4186.51....7............2.5784..8.69....7...1.9..",
".7.......5....1...1..9..2.66.....9....2.....89572..41..9.....84415.....9.....9.2.",
".....6.....4.2.....9.......7.9.4.86....73..2...2....43.263...8....2.1..4.7..9..31",
".........6...43..7..7.5....4.8..1.......67...5...8.9.3.1..74..834....6.9..5.3.4.1",
".63..51.....9...3.7..6.4...4365......5...3...9.........87.1.......3..91...1.4.5.8",
"2..5......86.9...7..9.481.275............6..4....827..9.........42..5....179..4..",
".796........4.7...8..31...432697.8.......3...9..8..1.....7.6....4..9...6.12......",
"1..9...76.5..7.498....5..1.9..8.4..2...........2.6..5....715.4.....2.......4..7..",
"53........71......896.3....7......2....5.13..3.86..75.9......8.....8..67..2...5.1",
"...59...7.154..8.2.......1.....52.6....84..5.......4.9....8..7..7.1..6.5..26.9.8.",
"1.6...9.5.45.8.............36.....2....2.6.989...4..512.....8..........4.38.5.1..",
".3975..4........8...2..8....8..9....3.65.....7..3.4....25..36.9...6..7......4....",
"17.2.5.6..8.9.....3...6..2981.6.2..........3...5....7...25.........3..9......8..5",
".....94....8.......9....12....57....2...43..1..38..25.9.178...3...9.......5...8.4",
"....67..3...9...5.136.........5.9..22...1359..7..24..6..4....3.52.......3.....2..",
"........5.....947....135.9...8..43.....5....2.1439.......2..1.9...........1..7.58",
".3.9.........8.697...5..1...1....5.3586...2.........897....8....2......13.17....8",
".....56......47.....2.9....2.4....6..9..8..25.6....97.67582..9.3....9......753...",
".....2....65...1..1.458.36..1.8......23.6..5..4.1.782.....4............5..8....47"],
          'harddb' : [
"..98.....8...3......4....6...3.....9....5..83......614.17..3.95..6.9.1.....1.784.",
".9.........83.5.6.7.5......2...8.9...576.1.........67...279....6...3.....1.5.6.3.",
"...2.7....8.6...496....3..7........69......2..7.......4..96.3.8..6...75.85.7.4.9.",
".148..39..7.2...1..3....6.....7.......6.4......9.6.4.2..........8..7.1.....1.38.6",
".96....4.........82.43..6.....61..92.639..8.....84..1...8..5...9........5.......1",
"6.9.2.4..37..1..6..12....5....3.........691.......4....9.....414..2.53...37...9..",
"..74.38.5.8..5..2.4..1...9....52.....2.....1.5..8......4.2..7.1..5..4...13.7.8...",
"9...5......8...42...7...8.1....9.3.4.9.8.3.7..4.5..2..3...2.7..2.....98.1........",
".8.76.....2749.5....15.2...862..7....9.6.5..44...2...........82..6.1.....7...9...",
".9..7..5....9....31...4...2................74....1659.....9.....4.2.56....57.32..",
".365...2.....3.1.4...4....65..6.8.1298...5........1..3..8............34...59....8",
".6.9...7...27..34.83.6..12.......4...4....2.........18.....3.....8.417.....896...",
".8.45.7.......948...9..........9....8576.1...6.1........61.2...94.7......72.6...4",
"..2..79..3....68..6.5.2..7.5.73....8.694.8.3.......6...53......8.6...7........4..",
"98.27.6.43.56..2.9...4...5....72...56..........2...8...2..3.56.............98.3.2",
"..914.2..4.8..597.16...8.5.9...............47.2.......5..2....6..74...9......64..",
"6....5..19....1.7..81.62.5..5.....8....8.621.....7..9....217..9...59..4......47..",
"........9...6..8.4.....13..4.7....83.1....2...3..84.97.7.....3.9..1....66..27.4..",
".36...8..5........19....75.4.5.8.......7......7....3..9....81.....53..6...761.9.4",
"....1.498.....3.......49.5...............713.4..13....14.9.278.7.3.8..2..25..4..9",
"4.689..3.1...4.2.99.3.......1....37.3.8....62......9.82..6..7...6...4.8...4......",
".....2.97...17.........824..4.....7.....8...2..7.14..5.....5.1812.34..........9..",
".3..8.26.2..6....9.9..23......9..........7.48....3691.....1.793.483....1.......2.",
"....2...8.8.9............2...4...951...5.47.2.67....4.62.....1.7....149..9.7.....",
"..7.96..5.1.78...2.8..5....8.......3.9........25.17..817...3......278....62...3..",
"..847.6..6...183....79.2.8...1..9.....9...1........42.....4...7........3273..1..6",
".5..9.4.76...1....3..46.9.5..7.5....4369..........7............2..3....914..72...",
".............5214....6.4.....73...6.1.....3.7..4..8.2.......5..5..87..3....41.7.6",
"...2.3..18..74.3...2.8...59.41.8.9.5...3....4....1.7..25............9.....7......",
"....15......4....5......78............31.82..74.....6.2..3.76.8.1.6....78..24..3.",
"6..32..1.......3.........544......26...14...........7515.6...9...2..9..7.7.25..6.",
"57...3....3..8.9..........3....4.1...48....3936....5..81....4..7....6.1.9....86.5",
"7...4.....41...59.26......19.4...178.......42.2....9..6....172....29.86..5.4.....",
"..1..4.5........61965..8...7...9..4.......6.........8.81..79...2...65..8..91..2.4",
"...8...69....36.....514...8..8.2.9.......8....2.9..8.4...6.5.91...3..6..3...12...",
"..52....92...97..37....61....9..2......5.9.6.6..4.............1...1.4.7.5...732.4",
".6..5..147..............2.5..1..872.5..46.8..2.89..5....9........4.8.9621........",
"..7..5......1......3.8........62..8.....39..2.6.5....97.9....282...9753...5..6..7",
"......53........78......9.2.1..57.6..59..83....8.92....8.6..753.2..351...6.8.....",
"35.4...7...1.2....4..........6...39....9...........1....319.6.42..73.5...942.6..3",
"........9..2...47...791.36........5..........5.4.6..1....6...2...52.49...293..7.1",
"..485......9..1.6886....4..........69.6.4.3..18....94.......18.25..8...9.......35",
"....5....6..4....9...6.....9.......2.72.68.354....7.....97...2......4..6.6..23.87",
"..67.........534....468.3......6.8....89..534...32.....82.9....7....49.84.3....7.",
"695.....48....1.....1..4.2.5....6....1.......72..895.1.8.....7...4...9.6....1.28.",
"..9...7.27..63.1.....9.............1....7.95.....49.......63.4..2...4..61....259.",
"..4..638.8..5.316.........46.5.2......1..98...2.1.4.95....9.........8.1.2...3....",
"9..2.......5.9.164...53..9.....4..2......1........2.3.2.9.6.5.8.13...9...4.8....2",
"......1.636....2...7.........7.138.....65....8...79..2.5..3..6..2....31.1.....7.9",
"...35..........4...2.....63....842.......5......6...518..73.6..6..1....2.1.....38"],


        'permute' : function(n) {
          var permute = [];
          var remaining = [];
          for (var i=0; i<n; i++) { remaining.push(i+1); }

          for (var x=0; x<n; x++) {
            var idx = Math.floor(Math.random()*remaining.length);
            var cur = remaining[idx];
            permute.push(cur);
            var nr = [];
            for (var j=0; j<idx; j++) {
              nr.push(remaining[j]);
            }
            if (idx < (remaining.length-1)) {
              for (var j=idx+1; j<remaining.length; j++) {
                nr.push(remaining[j]);
              }
            }
            remaining = nr;
          }
          return permute;
        },

        'serializegame' : function(game) {
          var ret = "";
          for (var r=0; r<9; r++) {
            for (var c=0; c<9; c++) {
              // format "." for blank, "a-i" for user-filled values,
              // 1-9 for puzzle reveals
              var cur = game[r][c];
              if (cur < 0) {
                cur = -cur;
                var x = 96+cur; // ('a' == 97)
                ret += String.fromCharCode(x);
              }
              else if (cur == 0) {
                ret += ".";
              }
              else {
                ret += cur;
              }
            }
          }
          return ret;                
        },

        'deserializegame' : function(d) {
          var game = new Array(9);
          var array = d.split("");
          if (array.length != 81) {
            return this.newgame(0);
          }
          var pidx = 0;
          for (var r = 0; r<9; r++) {
            game[r] = new Array(9);
            for (var c=0; c<9; c++) {
              var chr = array[pidx++];
              var chrid = chr.charCodeAt();
              if (chr == ".") {
                game[r][c] = 0;
              }
              else if ((chrid >= 97) && (chrid <= 105)) {
                game[r][c] = -(chrid - 96);
              }
              else if ((chrid >= 49) && (chrid <= 57)) {
                game[r][c] = chrid - 48;
              }
              else {
                return this.newgame(0);
              }
            }
          }
          return game;
        },

        'checkgame' : function(game) {

          var ret = { 'blank': 0};
          // check every row
          for (var r=0; r<9; r++) {
            var seen = {};
            for (var c=0; c<9; c++) {
              var cur = game[r][c];
              if (cur < 0) { cur = -cur; }
              if (cur > 0) {
                if (seen[cur]) {
                  ret.rowerror = r;
                  return ret;
                }
                seen[cur] = 1;
              }
              else {
                ret.blank++;
              }
            }
          }

          // check every column
          for (var c=0; c<9; c++) {
            var seen = {};
            for (var r=0; r<9; r++) {
              var cur = game[r][c];
              if (cur < 0) { cur = -cur; }
              if (cur > 0) {
                if (seen[cur]) {
                  ret.colerror = c;
                  return ret;
                }
                seen[cur] = 1;
              }
            }
          }

          // check every block -- tbd
          for (var br=0; br<3; br++) {
            for (var bc=0; bc<3; bc++) {
              var seen = {};
              var roff = br*3;
              var coff = bc*3;
              for (var r=0; r<3; r++) {
                for (var c=0; c<3; c++) {
                  var cur = game[r+roff][c+coff];
                  if (cur < 0) { cur = -cur; }
                  if (cur > 0) {
                    if (seen[cur]) {
                      ret.blockerror_row = br;
                      ret.blockerror_col = bc;
                      return ret;
                    }
                    seen[cur] = 1;
                  }
                }
              }
            }
          }

          return ret;
        },

        'newgame' : function(level) {
          var db;
          if (level == 0) { db = this.easydb; }
          else if (level == 1) { db = this.mediumdb; }
          else { db = this.harddb; }

          // step1: pick a random entry from the db.
          var puzzle = db[Math.floor(Math.random()*db.length)];

          // step2: make a 9x9 array out of this, permuting
          // the labels.
          var permute = this.permute(9);
          var puzzlearray = puzzle.split("");
          var pidx = 0;
          var cr = 0;
          var cc = 0;
          var game = new Array(9);
          while (pidx < 81) {
            if (cc == 0) {
              game[cr] = new Array(9);
            }
            if (puzzlearray[pidx] == ".") {
              game[cr][cc] = 0;
            }
            else {
              game[cr][cc] = permute[puzzlearray[pidx]-1];
            }
            pidx++;
            cc++;
            if (cc >= 9) {
              cc = 0;
              cr++;
            }
          }

          // tbd -- add row/col shuffles
          return game;
        }

      }


  })();

}
